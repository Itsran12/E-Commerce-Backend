// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  phone     String?
  token     String?  @db.Text
  role      Role     @default(USER)
  orders    Order[]
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id              String         @id @default(uuid())
  name            String
  description     String
  price           Float
  stock           Int
  categoryId      String
  category        Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  productVariants ProductVariant[]
  productImages   ProductImage[]
  orderItems      OrderItem[]    @relation("ProductOrderItems")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String   
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id              String           @id @default(uuid())
  name            String           @unique
  hexCode         String   
  productVariants ProductVariant[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Size {
  id              String           @id @default(uuid())
  name            String           @unique
  productVariants ProductVariant[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ProductVariant {
  id        String   @id @default(uuid())
  price     Float    
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorId   String
  color     Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  sizeId    String
  size      Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  orderItems OrderItem[] @relation("VariantOrderItems")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String        @id @default(uuid())
  createdAt  DateTime      @default(now())
  status     OrderStatus   @default(PENDING)
  total      Float
  userId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  payment    Payment?
}

model OrderItem {
  id          String         @id @default(uuid())
  quantity    Int
  price       Float
  productId   String
  product     Product        @relation("ProductOrderItems", fields: [productId], references: [id], onDelete: Cascade)
  variantId   String?
  variant     ProductVariant? @relation("VariantOrderItems", fields: [variantId], references: [id], onDelete: Cascade)
  orderId     String
  order       Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String         @id @default(uuid())
  orderId       String         @unique
  amount        Float
  status        PaymentStatus  @default(PENDING)
  paymentDate   DateTime       @default(now())
  paymentGateway String        
  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
