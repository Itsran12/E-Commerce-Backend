generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
}

enum PaymentMethod {
    CREDIT_CARD
    PAYPAL
    BANK_TRANSFER
}

enum Role {
    CUSTOMER
    ADMIN
}


enum OrderStatus {
    PENDING
    SHIPPED
    DELIVERED
    CANCELLED
}

model User {
    id        String   @id @default(uuid())
    email     String   @unique
    password  String
    name      String
    phone     String?
    token     String?  @db.Text
    role      Role     @default(CUSTOMER)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    orders    Order[]
    addresses Address[]
    carts     Cart[]
    payments  Payment[]

    @@map("users")
}

model Product {
    id            String        @id @default(uuid())
    name          String
    description   String?
    price         Float
    stock         Int
    categoryId    String
    category      Category      @relation(fields: [categoryId], references: [id])
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    orderItems    OrderItem[]
    productColors ProductColor[]
    productSizes  ProductSize[]
    productImages ProductImage[]
    cartItems     CartItem[]

    @@map("products")
}

model ProductColor {
    id        String   @id @default(uuid())
    color     String
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("product_colors")
}

model ProductSize {
    id        String   @id @default(uuid())
    size      String
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("product_sizes")
}

model ProductImage {
    id        String   @id @default(uuid())
    url       String
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("product_images")
}

model Category {
    id          String    @id @default(uuid())
    name        String    @unique
    description String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    products    Product[]

    @@map("categories")
}

model Order {
    id         String      @id @default(uuid())
    totalPrice Float
    status     OrderStatus @default(PENDING)
    userId     String
    user       User        @relation(fields: [userId], references: [id])
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    orderItems OrderItem[]
    payments   Payment[]

  @@map("orders")
}

model OrderItem {
    id        String   @id @default(uuid())
    quantity  Int
    price     Float
    orderId   String
    order     Order    @relation(fields: [orderId], references: [id])
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("order_items")
}

model Address {
    id        String   @id @default(uuid())
    street    String
    city      String
    state     String
    zip       String
    country   String
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("addresses")
}

model Cart {
    id        String   @id @default(uuid())
    userId    String   @unique
    user      User     @relation(fields: [userId], references: [id])
    items     CartItem[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("carts")
}

model CartItem {
    id        String   @id @default(uuid())
    quantity  Int
    cartId    String
    cart      Cart     @relation(fields: [cartId], references: [id])
    productId String
    product   Product  @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("cart_items")
}

model Payment {
    id         String   @id @default(uuid())
    orderId    String
    order      Order    @relation(fields: [orderId], references: [id])
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    amount     Float
    status     PaymentStatus
    method     PaymentMethod
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("payments")
}
